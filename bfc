#!/usr/bin/env ruby

require 'optparse'
require 'singleton'

DataArithmetic = Struct.new :value
PointerArithmetic = Struct.new :value

class MainProgram < OptionParser
  include Singleton

  SUPPORTED_TARGETS = [
    'x86_64-linux-gnu',
    'arm-linux-gnueabihf'
  ]

  def initialize
    super do |opts|
      @target = get_native_target
      @stack_size = 4096
      opts.banner = "Usage: bfc infile [options]\n"
      footer = "Supported targets:\n  #{SUPPORTED_TARGETS.join("\n  ")}\n"

      opts.on("--target=TARGET", "Generate code for given target") do |target|
        @target = target
      end

      opts.on("--stack-size=SIZE", "Allow a stack size of SIZE bytes") do |size|
        @stack_size = size.to_i
        abort "error: stack size must be an integer > 0" if @stack_size <= 0
      end

      opts.on_tail("-h", "--help", "Print this message") do
        puts opts
        puts footer
        exit
      end
    end

    begin parse!
    rescue OptionParser::InvalidOption => e; abort e.message
    end

    dirname = File.dirname __FILE__
    begin require "#{dirname}/codegen/#{@target}-codegen.rb"
    rescue LoadError => e; abort 'error: unsupported target'
    end

    @filename = ARGV.shift or abort "error: no input file"
    generator = case @target
                when 'x86_64-linux-gnu' then GnuLinuxAmd64Codegen
                when 'arm-linux-gnueabihf' then GnuLinuxArmHfCodegen
                else abort 'error: unsupported target'
                end

    @codegen = generator.new @stack_size

    begin @file = File.open @filename
    rescue Errno::ENOENT => e; abort e.message
    end
  end

  def run
    @codegen.gen_code scan
    @file.close
  end
private
  def scan
    tokens = []
    loopcount = 0
    @file.each_char do |ch|
      tokens << case ch
                when '+', '-' then scan_data_arithmetic ch
                when '<', '>' then scan_pointer_arithmetic ch
                when ',' then :getchar
                when '.' then :putchar
                when '[' then
                  loopcount += 1
                  :loopbegin
                when ']' then
                  loopcount -= 1
                  abort "error: unmatched ']'" if loopcount < 0
                  :loopend
                else next
                end
    end
    abort "error: unmatched '['" if loopcount > 0
    tokens
  end

  def scan_data_arithmetic ch
    value = (ch == '+' ? 1 : -1)
    @file.each_char do |c|
      case c
      when '+' then value += 1
      when '-' then value -= 1
      when '<', '>', ',', '.', '[', ']' then
        @file.ungetc c
        # TODO: Bounds checking for -255 .. 255?
        return DataArithmetic.new value
      else next
      end
    end
  end

  def scan_pointer_arithmetic ch
    value = (ch == '>' ? 1 : -1)
    @file.each_char do |c|
      case c
      when '>' then value += 1
      when '<' then value -= 1
      when '+', '-', ',', '.', '[', ']' then
        @file.ungetc c
        return PointerArithmetic.new value
      else next
      end
    end
  end

  # FIXME: Determine native CPU and OS
  def get_native_target
    'x86_64-linux-gnu'
  end
end

ARGV << '--help' if ARGV.empty?
MainProgram.instance.run