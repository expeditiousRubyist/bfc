#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'singleton'

DataArithmetic = Struct.new :value
PointerArithmetic = Struct.new :value

# Generic class for code generators to inherit from
# Handles all non architecture-specific activities in code generation
class Codegen
  include FileUtils
  def initialize stack_size
    @as = "#{@prefix}as"
    @ld = "#{@prefix}ld"
    @label_number = 0
    @stack_size = stack_size
  end

  def compile_executable
    @asmout.close
    binfile = File.basename @asmsrc, '.*'
    objfile = "#{binfile}.o"
    `#{@as} #{@asmsrc} -o #{objfile}`
    `#{@ld} #{objfile} -o #{binfile}`
    rm @asmsrc
    rm objfile
  end

  def gen_preamble
    dirname = File.dirname __FILE__
    @asmout.write File.read("#{dirname}/asm/#{@prefix}preamble.s")
  end

  def fresh_label
    @label_number += 1
    ".L#{@label_number}"
  end
end

# Code generator for our currently only supported target, x86_64-linux-gnu
class GnuLinuxAmd64Codegen < Codegen
  def initialize stack_size
    @prefix = 'x86_64-linux-gnu-'
    @asmsrc = 'out.s' # TODO: make this settable via argument?
    @asmout = File.open(@asmsrc, 'w')
    super
  end

  def gen_code tokens
    @data_op = true
    @begin_label_stack = []
    @end_label_stack = []

    gen_preamble

    tokens.each do |tok|
      case tok
      when DataArithmetic then gen_data_op tok.value
      when PointerArithmetic then gen_pointer_op tok.value
      when :loopbegin then gen_loop_begin
      when :loopend then gen_loop_end
      when :putchar then gen_putchar
      when :getchar then gen_getchar
      end
    end

    gen_postamble
    compile_executable
  end
private
  def gen_preamble
    super
    @asmout.puts 'bfmain:'
    @asmout.puts "\tsubq\t$#{@stack_size}, %rsp"
    @asmout.puts "\tmovq\t%rsp, %rbx"
    @asmout.puts "\tinc %rbx"
  end

  def gen_postamble
    @asmout.puts "\taddq\t$#{@stack_size}, %rsp"
    @asmout.puts "\tret"
  end

  def gen_data_op amount
    return if amount.zero?
    restore_register_if_changed

    if amount < 0 then
      @asmout.puts "\tsubb\t$#{amount.abs}, %r12b"
    else
      @asmout.puts "\taddb\t$#{amount}, %r12b"
    end
  end

  def gen_pointer_op amount
    return if amount.zero?
    save_register_if_changed

    # TODO: Consider adding option of overflow checking?
    if amount < 0 then
      @asmout.puts "\tsubq\t$#{amount.abs}, %rbx"
    else
      @asmout.puts "\taddq\t$#{amount}, %rbx"
    end
  end

  def gen_loop_begin
    restore_register_if_changed

    begin_label = fresh_label
    @asmout.puts "#{begin_label}:"
    @begin_label_stack.push begin_label

    end_label = fresh_label
    @asmout.puts "\ttestb\t%r12b, %r12b"
    @asmout.puts "\tje\t#{end_label}"
    @end_label_stack.push end_label
  end

  def gen_loop_end
    restore_register_if_changed
    @asmout.puts "\tjmp\t#{@begin_label_stack.pop}"
    @asmout.puts "#{@end_label_stack.pop}:"
  end

  def gen_putchar
    save_register_if_changed
    @asmout.puts "\tcall\tbfputchar"
  end

  def gen_getchar
    @data_op = false # Note: no need to save_register_if_changed b/c overriding.
    @asmout.puts "\tcall\tbfgetchar"
  end

  def save_register_if_changed
    if @data_op then
      @asmout.puts "\tmovb\t%r12b, (%rbx)"
      @data_op = false
    end
  end

  def restore_register_if_changed
    unless @data_op
      @asmout.puts "\tmovb\t(%rbx), %r12b"
      @data_op = true
    end
  end
end

class MainProgram < OptionParser
  include Singleton

  SUPPORTED_TARGETS = ['x86_64-linux-gnu']

  def initialize
    super do |opts|
      @target = get_native_target
      @stack_size = 4096
      opts.banner = "Usage: bfc infile [options]\n"
      footer = "Supported targets:\n  #{SUPPORTED_TARGETS.join("\n  ")}\n"

      opts.on("--target=TARGET", "Generate code for given target") do |target|
        @target = target
      end

      opts.on("--stack-size=SIZE", "Allow a stack size of SIZE bytes") do |size|
        @stack_size = size.to_i
        abort "error: stack size must be an integer > 0" if @stack_size <= 0
      end

      opts.on_tail("-h", "--help", "Print this message") do
        puts opts
        puts footer
        exit
      end
    end

    begin parse!
    rescue OptionParser::InvalidOption => e; abort e.message
    end

    @filename = ARGV.shift or abort "error: no input file"
    @template = case @target
                when 'x86_64-linux-gnu' then GnuLinuxAmd64Codegen
                else abort 'error: unsupported target'
                end
    @codegen = @template.new @stack_size

    begin @file = File.open @filename
    rescue Errno::ENOENT => e; abort e.message
    end
  end

  def run
    @codegen.gen_code scan
    @file.close
  end
private
  def scan
    tokens = []
    loopcount = 0
    @file.each_char do |ch|
      tokens << case ch
                when '+', '-' then scan_data_arithmetic ch
                when '<', '>' then scan_pointer_arithmetic ch
                when ',' then :getchar
                when '.' then :putchar
                when '[' then
                  loopcount += 1
                  :loopbegin
                when ']' then
                  loopcount -= 1
                  abort "error: unmatched ']'" if loopcount < 0
                  :loopend
                else next
                end
    end
    abort "error: unmatched '['" if loopcount > 0
    tokens
  end

  def scan_data_arithmetic ch
    value = (ch == '+' ? 1 : -1)
    @file.each_char do |c|
      case c
      when '+' then value += 1
      when '-' then value -= 1
      when '<', '>', ',', '.', '[', ']' then
        @file.ungetc c
        # TODO: Bounds checking for -255 .. 255?
        return DataArithmetic.new value
      else next
      end
    end
  end

  def scan_pointer_arithmetic ch
    value = (ch == '>' ? 1 : -1)
    @file.each_char do |c|
      case c
      when '>' then value += 1
      when '<' then value -= 1
      when '+', '-', ',', '.', '[', ']' then
        @file.ungetc c
        return PointerArithmetic.new value
      else next
      end
    end
  end

  def get_native_target
    'x86_64-linux-gnu'
  end
end

ARGV << '--help' if ARGV.empty?
MainProgram.instance.run